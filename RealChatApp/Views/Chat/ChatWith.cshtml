@model List<ChatMessage>
@{
    var receiver = ViewBag.Receiver as User;
    var currentUserId = (int)ViewBag.CurrentUserId;
    Layout = "_Layout";
}

<h3>@receiver.Username</h3>

<div id="chatWindow" style="border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: scroll;">
    @foreach (var msg in Model)
    {
        <div class="mb-2 @(msg.SenderId == currentUserId ? "text-end" : "text-start")">
            <img src="@msg.Sender.ProfileImagePath" width="30" height="30" style="object-fit: cover; border-radius: 50%;" />
            <strong>@msg.Sender.Username</strong><br />
            <span>@msg.Message</span>
        </div>
    }
</div>

<form id="chatForm" class="mt-3">
    <input type="hidden" id="receiverId" value="@receiver.Id" />
    <div class="input-group">
        <input type="text" id="messageInput" class="form-control" placeholder="Type a message..." />
        <button class="btn btn-primary" type="submit">Send</button>
    </div>
</form>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const currentUserId = @currentUserId;
        const receiverId = @receiver.Id;

        // Scroll to bottom of chat window
        function scrollToBottom() {
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        connection.on("ReceiveMessage", (senderId, rId, message) => {
            // Only display if message is part of current conversation
            if ((senderId == currentUserId && rId == receiverId) ||
                (senderId == receiverId && rId == currentUserId)) {

                const chatWindow = document.getElementById("chatWindow");

                // Create message element
                const msgDiv = document.createElement("div");
                msgDiv.className = senderId == currentUserId ? "text-end mb-2" : "text-start mb-2";

                // Match the HTML structure you're using in the initial rendering
                msgDiv.innerHTML = `
                    <img src="${senderId == currentUserId ? '@User.FindFirst("ProfileImagePath")?.Value' : '@receiver.ProfileImagePath'}"
                         width="30" height="30" style="object-fit: cover; border-radius: 50%;" />
                    <strong>${senderId == currentUserId ? "You" : "@receiver.Username"}</strong><br />
                    <span>${message}</span>
                `;

                chatWindow.appendChild(msgDiv);
                scrollToBottom();
            }
        });

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(startConnection, 5000);
            }
        }

        // Start the connection
        startConnection();

        // Handle form submission
        document.getElementById("chatForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message) {
                try {
                    // Send via SignalR
                    await connection.invoke("SendMessage", currentUserId, receiverId, message);

                    // Also send via HTTP if you need to persist to database
                    await fetch("/Chat/SendMessage", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ receiverId, message })
                    });

                    messageInput.value = "";
                } catch (err) {
                    console.error(err);
                }
            }
        });

        scrollToBottom();
    </script>
}
