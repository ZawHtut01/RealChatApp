@model List<ChatMessage>
@{
    var receiver = ViewBag.Receiver as User;
    var currentUserId = (int)ViewBag.CurrentUserId;
    Layout = "_Layout";
}

<div class="chat-container">
    <div class="chat-header">
        <div class="user-info">
            <img src="@receiver.ProfileImagePath" class="profile-image" />
            <div>
                <h4>@receiver.Username</h4>
                @* <div id="typingIndicator" class="typing-indicator" style="display: none;"> *@
                @*     <span class="typing-dots"> *@
                @*         <span>.</span><span>.</span><span>.</span> *@
                @*     </span> *@
                @* </div> *@
            </div>
        </div>
    </div>

    <div id="chatWindow" class="chat-messages">
        @foreach (var msg in Model)
        {
            <div class="message @(msg.SenderId == currentUserId ? "sent" : "received")">
                @if (msg.SenderId != currentUserId)
                {
                    <img src="@msg.Sender.ProfileImagePath" class="message-profile-image" />
                }
                <div class="message-content">
                    @if (msg.SenderId != currentUserId)
                    {
                        <div class="message-sender">@msg.Sender.Username</div>
                    }
                    <div class="message-bubble">@msg.Message</div>
                    <div class="message-time">@msg.Timestamp.ToString("h:mm tt")</div>
                </div>
            </div>
        }
    </div>

    <!-- Typing indicator above input box -->
    <div id="typingIndicator" class="typing-indicator" style="display: none;">
        <img src="@receiver.ProfileImagePath" class="typing-profile-image" />
        <div class="typing-content">
            <div class="typing-name">@receiver.Username</div>
            <div class="typing-status">is typing</div>
            <div class="typing-dots">
                <span>.</span>
                <span>.</span>
                <span>.</span>
            </div>
        </div>
    </div>

    <form id="chatForm" class="chat-input">
        <input type="hidden" id="receiverId" value="@receiver.Id" />
        <div class="input-group">
            <input type="text" id="messageInput" class="form-control" placeholder="Type a message..."
                   oninput="handleTyping()" />
            <button class="btn btn-send" type="submit">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </form>
</div>

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #4361ee;
            --sent-message-bg: #4361ee;
            --received-message-bg: #f1f3f5;
            --text-color: #333;
            --light-text: #6c757d;
            --chat-bg: #ffffff;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 800px;
            margin: 0 auto;
            background-color: var(--chat-bg);
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-header {
            padding: 15px;
            border-bottom: 1px solid #eee;
            background-color: #f8f9fa;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .profile-image, .message-profile-image {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .chat-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            display: flex;
            max-width: 80%;
        }

            .message.sent {
                align-self: flex-end;
                flex-direction: row-reverse;
            }

            .message.received {
                align-self: flex-start;
            }

        .message-content {
            display: flex;
            flex-direction: column;
            margin: 0 10px;
        }

        .message-sender {
            font-size: 0.8rem;
            color: var(--light-text);
            margin-bottom: 2px;
        }

        .message-bubble {
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.4;
            word-wrap: break-word;
        }

        .message.sent .message-bubble {
            background-color: var(--sent-message-bg);
            color: white;
            border-bottom-right-radius: 2px;
        }

        .message.received .message-bubble {
            background-color: var(--received-message-bg);
            color: var(--text-color);
            border-bottom-left-radius: 2px;
        }

        .message-time {
            font-size: 0.7rem;
            color: var(--light-text);
            margin-top: 3px;
            align-self: flex-end;
        }

        .chat-input {
            padding: 15px;
            border-top: 1px solid #eee;
            background-color: #f8f9fa;
        }

        .input-group {
            display: flex;
            gap: 10px;
        }

        .form-control {
            flex: 1;
            border-radius: 20px;
            padding: 10px 15px;
            border: 1px solid #ddd;
        }

        .btn-send {
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--primary-color);
            color: white;
            border: none;
        }

        /* Add these new styles for the typing indicator */
        .typing-indicator {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            background-color: #f1f3f5;
            border-radius: 18px;
            margin: 5px 15px;
            width: fit-content;
            animation: fadeIn 0.3s ease;
        }

        .typing-profile-image {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 10px;
        }

        .typing-content {
            display: flex;
            align-items: center;
        }

        .typing-name {
            font-weight: bold;
            font-size: 0.8rem;
            margin-right: 5px;
        }

        .typing-status {
            font-size: 0.8rem;
            color: #6c757d;
            margin-right: 5px;
        }

        .typing-dots span {
            display: inline-block;
            font-size: 1.2rem;
            line-height: 1;
            animation: bounce 1.5s infinite ease-in-out;
            opacity: 0.5;
        }

            .typing-dots span:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dots span:nth-child(3) {
                animation-delay: 0.4s;
            }

        keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(5px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        keyframes bounce {
            0%, 100%

        {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-3px);
            opacity: 1;
        }

        }


        @@media (max-width: 576px) {
            .chat-container {
                border-radius: 0;
                height: 100vh;
            }

            .message {
                max-width: 90%;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const currentUserId = @currentUserId;
        const receiverId = @receiver.Id;
        let typingTimer;
        const TYPING_TIMEOUT = 2000; // 2 seconds

        // Scroll to bottom of chat window
        function scrollToBottom() {
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        // Handle receiving messages
        connection.on("ReceiveMessage", (senderId, rId, message, timestamp) => {
            if ((senderId == currentUserId && rId == receiverId) ||
                (senderId == receiverId && rId == currentUserId)) {

                const chatWindow = document.getElementById("chatWindow");
                const isSent = senderId == currentUserId;
                const formattedTime = new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                const messageDiv = document.createElement("div");
                messageDiv.className = `message ${isSent ? 'sent' : 'received'}`;

                messageDiv.innerHTML = `
                    ${!isSent ? `<img src="@receiver.ProfileImagePath" class="message-profile-image" />` : ''}
                    <div class="message-content">
                        <div class="message-bubble">${message}</div>
                        <div class="message-time">${formattedTime}</div>
                    </div>
                `;

                chatWindow.appendChild(messageDiv);
                scrollToBottom();
            }
        });

         // Update the typing indicator handling in your JavaScript
        connection.on("UserTyping", (senderId, rId, isTyping) => {
            if (senderId == receiverId && rId == currentUserId) {
                const typingIndicator = document.getElementById("typingIndicator");
                if (isTyping) {
                    typingIndicator.style.display = 'flex';
                } else {
                    typingIndicator.style.display = 'none';
                }
            }
        });

        // Start typing notification
        function handleTyping() {
            connection.invoke("SendTyping", currentUserId, receiverId, true)
                .catch(err => console.error(err));

            // Clear previous timer
            clearTimeout(typingTimer);

            // Set new timer to stop typing notification
            typingTimer = setTimeout(() => {
                connection.invoke("SendTyping", currentUserId, receiverId, false)
                    .catch(err => console.error(err));
            }, TYPING_TIMEOUT);
        }

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(startConnection, 5000);
            }
        }

        // Start the connection
        startConnection();

        // Handle form submission
        document.getElementById("chatForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value.trim();

            if (message) {
                try {
                    const timestamp = new Date().toISOString();

                    // Send via SignalR
                    await connection.invoke("SendMessage", currentUserId, receiverId, message, timestamp);

                    // Also send via HTTP to persist to database
                    await fetch("/Chat/SendMessage", {
                        method: "POST",
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ receiverId, message })
                    });

                    messageInput.value = "";

                    // Clear typing notification
                    connection.invoke("SendTyping", currentUserId, receiverId, false)
                        .catch(err => console.error(err));
                } catch (err) {
                    console.error(err);
                }
            }
        });

        scrollToBottom();
    </script>
}

